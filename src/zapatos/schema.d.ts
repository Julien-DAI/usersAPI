/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **creatures**
   * - Table in database
   */
  export namespace creatures {
    export type Table = 'creatures';
    export interface Selectable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id: number;
      /**
      * **creatures.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **creatures.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **creatures.hp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hp: number;
      /**
      * **creatures.atk**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      atk: number;
    }
    export interface JSONSelectable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id: number;
      /**
      * **creatures.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **creatures.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **creatures.hp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hp: number;
      /**
      * **creatures.atk**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      atk: number;
    }
    export interface Whereable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.hp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.atk**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      atk?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **creatures.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **creatures.hp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hp: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **creatures.atk**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      atk: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **creatures.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **creatures.hp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **creatures.atk**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      atk?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'creatures_name_key' | 'creatures_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **matchs**
   * - Table in database
   */
  export namespace matchs {
    export type Table = 'matchs';
    export interface Selectable {
      /**
      * **matchs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('matchs_id_seq'::regclass)`
      */
      id: number;
      /**
      * **matchs.player1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player1_id: number | null;
      /**
      * **matchs.player2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player2_id: number | null;
      /**
      * **matchs.winner**
      * - `int4` in database
      * - Nullable, no default
      */
      winner: number | null;
      /**
      * **matchs.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number;
    }
    export interface JSONSelectable {
      /**
      * **matchs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('matchs_id_seq'::regclass)`
      */
      id: number;
      /**
      * **matchs.player1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player1_id: number | null;
      /**
      * **matchs.player2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player2_id: number | null;
      /**
      * **matchs.winner**
      * - `int4` in database
      * - Nullable, no default
      */
      winner: number | null;
      /**
      * **matchs.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number;
    }
    export interface Whereable {
      /**
      * **matchs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('matchs_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matchs.player1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player1_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matchs.player2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player2_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matchs.winner**
      * - `int4` in database
      * - Nullable, no default
      */
      winner?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matchs.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **matchs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('matchs_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **matchs.player1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player1_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **matchs.player2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player2_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **matchs.winner**
      * - `int4` in database
      * - Nullable, no default
      */
      winner?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **matchs.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **matchs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('matchs_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **matchs.player1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player1_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **matchs.player2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      player2_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **matchs.winner**
      * - `int4` in database
      * - Nullable, no default
      */
      winner?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **matchs.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'matchs_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pg_stat_statements**
   * - View in database
   */
  export namespace pg_stat_statements {
    export type Table = 'pg_stat_statements';
    export interface Selectable {
      /**
      * **pg_stat_statements.userid**
      * - `oid` in database
      * - Nullable, no default
      */
      userid: number | null;
      /**
      * **pg_stat_statements.dbid**
      * - `oid` in database
      * - Nullable, no default
      */
      dbid: number | null;
      /**
      * **pg_stat_statements.queryid**
      * - `int8` in database
      * - Nullable, no default
      */
      queryid: db.Int8String | null;
      /**
      * **pg_stat_statements.query**
      * - `text` in database
      * - Nullable, no default
      */
      query: string | null;
      /**
      * **pg_stat_statements.calls**
      * - `int8` in database
      * - Nullable, no default
      */
      calls: db.Int8String | null;
      /**
      * **pg_stat_statements.total_time**
      * - `float8` in database
      * - Nullable, no default
      */
      total_time: number | null;
      /**
      * **pg_stat_statements.min_time**
      * - `float8` in database
      * - Nullable, no default
      */
      min_time: number | null;
      /**
      * **pg_stat_statements.max_time**
      * - `float8` in database
      * - Nullable, no default
      */
      max_time: number | null;
      /**
      * **pg_stat_statements.mean_time**
      * - `float8` in database
      * - Nullable, no default
      */
      mean_time: number | null;
      /**
      * **pg_stat_statements.stddev_time**
      * - `float8` in database
      * - Nullable, no default
      */
      stddev_time: number | null;
      /**
      * **pg_stat_statements.rows**
      * - `int8` in database
      * - Nullable, no default
      */
      rows: db.Int8String | null;
      /**
      * **pg_stat_statements.shared_blks_hit**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_hit: db.Int8String | null;
      /**
      * **pg_stat_statements.shared_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_read: db.Int8String | null;
      /**
      * **pg_stat_statements.shared_blks_dirtied**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_dirtied: db.Int8String | null;
      /**
      * **pg_stat_statements.shared_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_written: db.Int8String | null;
      /**
      * **pg_stat_statements.local_blks_hit**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_hit: db.Int8String | null;
      /**
      * **pg_stat_statements.local_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_read: db.Int8String | null;
      /**
      * **pg_stat_statements.local_blks_dirtied**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_dirtied: db.Int8String | null;
      /**
      * **pg_stat_statements.local_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_written: db.Int8String | null;
      /**
      * **pg_stat_statements.temp_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      temp_blks_read: db.Int8String | null;
      /**
      * **pg_stat_statements.temp_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      temp_blks_written: db.Int8String | null;
      /**
      * **pg_stat_statements.blk_read_time**
      * - `float8` in database
      * - Nullable, no default
      */
      blk_read_time: number | null;
      /**
      * **pg_stat_statements.blk_write_time**
      * - `float8` in database
      * - Nullable, no default
      */
      blk_write_time: number | null;
    }
    export interface JSONSelectable {
      /**
      * **pg_stat_statements.userid**
      * - `oid` in database
      * - Nullable, no default
      */
      userid: number | null;
      /**
      * **pg_stat_statements.dbid**
      * - `oid` in database
      * - Nullable, no default
      */
      dbid: number | null;
      /**
      * **pg_stat_statements.queryid**
      * - `int8` in database
      * - Nullable, no default
      */
      queryid: number | null;
      /**
      * **pg_stat_statements.query**
      * - `text` in database
      * - Nullable, no default
      */
      query: string | null;
      /**
      * **pg_stat_statements.calls**
      * - `int8` in database
      * - Nullable, no default
      */
      calls: number | null;
      /**
      * **pg_stat_statements.total_time**
      * - `float8` in database
      * - Nullable, no default
      */
      total_time: number | null;
      /**
      * **pg_stat_statements.min_time**
      * - `float8` in database
      * - Nullable, no default
      */
      min_time: number | null;
      /**
      * **pg_stat_statements.max_time**
      * - `float8` in database
      * - Nullable, no default
      */
      max_time: number | null;
      /**
      * **pg_stat_statements.mean_time**
      * - `float8` in database
      * - Nullable, no default
      */
      mean_time: number | null;
      /**
      * **pg_stat_statements.stddev_time**
      * - `float8` in database
      * - Nullable, no default
      */
      stddev_time: number | null;
      /**
      * **pg_stat_statements.rows**
      * - `int8` in database
      * - Nullable, no default
      */
      rows: number | null;
      /**
      * **pg_stat_statements.shared_blks_hit**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_hit: number | null;
      /**
      * **pg_stat_statements.shared_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_read: number | null;
      /**
      * **pg_stat_statements.shared_blks_dirtied**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_dirtied: number | null;
      /**
      * **pg_stat_statements.shared_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_written: number | null;
      /**
      * **pg_stat_statements.local_blks_hit**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_hit: number | null;
      /**
      * **pg_stat_statements.local_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_read: number | null;
      /**
      * **pg_stat_statements.local_blks_dirtied**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_dirtied: number | null;
      /**
      * **pg_stat_statements.local_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_written: number | null;
      /**
      * **pg_stat_statements.temp_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      temp_blks_read: number | null;
      /**
      * **pg_stat_statements.temp_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      temp_blks_written: number | null;
      /**
      * **pg_stat_statements.blk_read_time**
      * - `float8` in database
      * - Nullable, no default
      */
      blk_read_time: number | null;
      /**
      * **pg_stat_statements.blk_write_time**
      * - `float8` in database
      * - Nullable, no default
      */
      blk_write_time: number | null;
    }
    export interface Whereable {
      /**
      * **pg_stat_statements.userid**
      * - `oid` in database
      * - Nullable, no default
      */
      userid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.dbid**
      * - `oid` in database
      * - Nullable, no default
      */
      dbid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.queryid**
      * - `int8` in database
      * - Nullable, no default
      */
      queryid?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.query**
      * - `text` in database
      * - Nullable, no default
      */
      query?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.calls**
      * - `int8` in database
      * - Nullable, no default
      */
      calls?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.total_time**
      * - `float8` in database
      * - Nullable, no default
      */
      total_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.min_time**
      * - `float8` in database
      * - Nullable, no default
      */
      min_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.max_time**
      * - `float8` in database
      * - Nullable, no default
      */
      max_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.mean_time**
      * - `float8` in database
      * - Nullable, no default
      */
      mean_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.stddev_time**
      * - `float8` in database
      * - Nullable, no default
      */
      stddev_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.rows**
      * - `int8` in database
      * - Nullable, no default
      */
      rows?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.shared_blks_hit**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_hit?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.shared_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_read?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.shared_blks_dirtied**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_dirtied?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.shared_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      shared_blks_written?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.local_blks_hit**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_hit?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.local_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_read?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.local_blks_dirtied**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_dirtied?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.local_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      local_blks_written?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.temp_blks_read**
      * - `int8` in database
      * - Nullable, no default
      */
      temp_blks_read?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.temp_blks_written**
      * - `int8` in database
      * - Nullable, no default
      */
      temp_blks_written?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.blk_read_time**
      * - `float8` in database
      * - Nullable, no default
      */
      blk_read_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_stat_statements.blk_write_time**
      * - `float8` in database
      * - Nullable, no default
      */
      blk_write_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **rounds**
   * - Table in database
   */
  export namespace rounds {
    export type Table = 'rounds';
    export interface Selectable {
      /**
      * **rounds.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('rounds_id_seq'::regclass)`
      */
      id: number;
      /**
      * **rounds.creature1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature1_id: number | null;
      /**
      * **rounds.match_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      match_id: number;
      /**
      * **rounds.creature2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature2_id: number | null;
      /**
      * **rounds.creature_winner**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_winner: number | null;
      /**
      * **rounds.round_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      round_number: number;
      /**
      * **rounds.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number;
    }
    export interface JSONSelectable {
      /**
      * **rounds.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('rounds_id_seq'::regclass)`
      */
      id: number;
      /**
      * **rounds.creature1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature1_id: number | null;
      /**
      * **rounds.match_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      match_id: number;
      /**
      * **rounds.creature2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature2_id: number | null;
      /**
      * **rounds.creature_winner**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_winner: number | null;
      /**
      * **rounds.round_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      round_number: number;
      /**
      * **rounds.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number;
    }
    export interface Whereable {
      /**
      * **rounds.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('rounds_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rounds.creature1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature1_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rounds.match_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      match_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rounds.creature2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature2_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rounds.creature_winner**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_winner?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rounds.round_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      round_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rounds.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **rounds.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('rounds_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **rounds.creature1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature1_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **rounds.match_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      match_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **rounds.creature2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature2_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **rounds.creature_winner**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_winner?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **rounds.round_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      round_number: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **rounds.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **rounds.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('rounds_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **rounds.creature1_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature1_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **rounds.match_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      match_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **rounds.creature2_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature2_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **rounds.creature_winner**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_winner?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **rounds.round_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      round_number?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **rounds.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'rounds_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id: number;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **users.badges**
      * - `int4` in database
      * - Nullable, no default
      */
      badges: number | null;
      /**
      * **users.password**
      * - `varchar` in database
      * - Nullable, no default
      */
      password: string | null;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id: number;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **users.badges**
      * - `int4` in database
      * - Nullable, no default
      */
      badges: number | null;
      /**
      * **users.password**
      * - `varchar` in database
      * - Nullable, no default
      */
      password: string | null;
    }
    export interface Whereable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.badges**
      * - `int4` in database
      * - Nullable, no default
      */
      badges?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.password**
      * - `varchar` in database
      * - Nullable, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.badges**
      * - `int4` in database
      * - Nullable, no default
      */
      badges?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.password**
      * - `varchar` in database
      * - Nullable, no default
      */
      password?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.badges**
      * - `int4` in database
      * - Nullable, no default
      */
      badges?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.password**
      * - `varchar` in database
      * - Nullable, no default
      */
      password?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = creatures.Table | matchs.Table | pg_stat_statements.Table | rounds.Table | users.Table;
    export type Selectable = creatures.Selectable | matchs.Selectable | pg_stat_statements.Selectable | rounds.Selectable | users.Selectable;
    export type JSONSelectable = creatures.JSONSelectable | matchs.JSONSelectable | pg_stat_statements.JSONSelectable | rounds.JSONSelectable | users.JSONSelectable;
    export type Whereable = creatures.Whereable | matchs.Whereable | pg_stat_statements.Whereable | rounds.Whereable | users.Whereable;
    export type Insertable = creatures.Insertable | matchs.Insertable | pg_stat_statements.Insertable | rounds.Insertable | users.Insertable;
    export type Updatable = creatures.Updatable | matchs.Updatable | pg_stat_statements.Updatable | rounds.Updatable | users.Updatable;
    export type UniqueIndex = creatures.UniqueIndex | matchs.UniqueIndex | pg_stat_statements.UniqueIndex | rounds.UniqueIndex | users.UniqueIndex;
    export type Column = creatures.Column | matchs.Column | pg_stat_statements.Column | rounds.Column | users.Column;
  
    export type AllBaseTables = [creatures.Table, matchs.Table, rounds.Table, users.Table];
    export type AllForeignTables = [];
    export type AllViews = [pg_stat_statements.Table];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [creatures.Table, matchs.Table, pg_stat_statements.Table, rounds.Table, users.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "creatures": creatures.Selectable;
    "matchs": matchs.Selectable;
    "pg_stat_statements": pg_stat_statements.Selectable;
    "rounds": rounds.Selectable;
    "users": users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "creatures": creatures.JSONSelectable;
    "matchs": matchs.JSONSelectable;
    "pg_stat_statements": pg_stat_statements.JSONSelectable;
    "rounds": rounds.JSONSelectable;
    "users": users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "creatures": creatures.Whereable;
    "matchs": matchs.Whereable;
    "pg_stat_statements": pg_stat_statements.Whereable;
    "rounds": rounds.Whereable;
    "users": users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "creatures": creatures.Insertable;
    "matchs": matchs.Insertable;
    "pg_stat_statements": pg_stat_statements.Insertable;
    "rounds": rounds.Insertable;
    "users": users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "creatures": creatures.Updatable;
    "matchs": matchs.Updatable;
    "pg_stat_statements": pg_stat_statements.Updatable;
    "rounds": rounds.Updatable;
    "users": users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "creatures": creatures.UniqueIndex;
    "matchs": matchs.UniqueIndex;
    "pg_stat_statements": pg_stat_statements.UniqueIndex;
    "rounds": rounds.UniqueIndex;
    "users": users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "creatures": creatures.Column;
    "matchs": matchs.Column;
    "pg_stat_statements": pg_stat_statements.Column;
    "rounds": rounds.Column;
    "users": users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "creatures": creatures.SQL;
    "matchs": matchs.SQL;
    "pg_stat_statements": pg_stat_statements.SQL;
    "rounds": rounds.SQL;
    "users": users.SQL;
  }[T];

}
